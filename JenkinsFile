import com.cloudbees.plugins.credentials.impl.*;
import com.cloudbees.plugins.credentials.*;
import com.cloudbees.plugins.credentials.domains.*;

pipeline 
{
    environment 
    {   
        REPOSITORY_CREDENTIALS_ID = "REPOSITORY_CREDENTIALS"		
		IMAGE = "${CONTIANER_REPOSITORY_URL}:v_${BUILD_NUMBER}" 
		ACCELERATE_PACKAGE_FILENAME="packages.json"
		PROJECT_REPOSITORY_PASSWORD="$PROJECT_REPOSITORY_PASSWORD"
		PROJECT_REPOSITORY_USERNAME="$PROJECT_REPOSITORY_USERNAME"
		PROJECT_REPOSITORY_URL = "$PROJECT_REPOSITORY_URL"
    }
    agent any
    stages
	{    
	         stage('Prepare credentials') 
            {
                steps
                {
                    script
                        {	
                            
							def repo_credentials = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL,REPOSITORY_CREDENTIALS_ID, "description", "$PROJECT_REPOSITORY_USERNAME", "$PROJECT_REPOSITORY_PASSWORD")
							SystemCredentialsProvider.getInstance().getStore().removeCredentials(Domain.global(), repo_credentials)
                            SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), repo_credentials)
                        }
                }				
            }			
            stage('Clone sources') 
            {
                steps
                {
                    script
                        {						
							git credentialsId: REPOSITORY_CREDENTIALS_ID,  url: PROJECT_REPOSITORY_URL
                        }
                }				
            }
			
			stage('Update settings') 
            {
                steps
                {
                    script
                        {						
							bat 'echo todo : replace-in-file -m'
                        }
                }				
            }
			
			stage('Build the source code') 
            {
                steps
                {
                    script
                        {	
							bat "accelerate-package-restore export --out %ACCELERATE_PACKAGE_FILENAME%"
                            bat "docker build -t $IMAGE -f Build.Dockerfile --build-arg ACCELERATE_PACKAGE_FILENAME=%ACCELERATE_PACKAGE_FILENAME% ."
                        }
                }				
            }			

    }
     post
    {
		success
		{
			script 
			{
				bat "docker rmi $IMAGE | true"
			}
		}     
    }	
}

