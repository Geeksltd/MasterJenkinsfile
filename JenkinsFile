def sendEmail(subject,content)
{
		emailext (body: content,
			mimeType: 'text/html',
			subject: "[Jenkins] Hub ${subject}",
			to: "${BUILD_NOTIFICATION_RECIPIENTS}")
			
}

pipeline 
{
	parameters 
	{
		string(name: "authenticationDomain" , defaultValue : 'app.geeks.ltd')				
		string(name: "ecrAddress", defaultValue: '669486994886.dkr.ecr.eu-west-1.amazonaws.com')		
		string(name: "region", defaultValue: 'eu-west-1')						
		string(name: "k8sSSHServer" , defaultValue : 'https://api.app.geeks.ltd')																			
		string(name: "privateRepositoryAddress" , defaultValue : 'http://nuget.geeksms.uat.co/nuget')				
		booleanParam(name: "Rebuild" , defaultValue : false)
	}
    environment 
    {        
        IMAGE = 'geeksms-hub'		
		REGION_NAME = "${params.region}"
		ECR_URL = "https://${params.ecrAddress}"
		ECR_CRED = credentials('ECRCRED')
		BUILD_VERSION="v_${BUILD_NUMBER}"
		ECR_IMAGE_URL = "${params.ecrAddress}/${IMAGE}:${BUILD_VERSION}"        		
        AWS_CREDENTIALS_ID = 'JenkinsECRAWSCredentials'
		GIT_REPOSITORY = 'git@gitlab.com:Geeks.Microservices/AccessHub.git'
		GIT_CREDENTIALS_ID = '1ef3615c-8221-4d33-af6d-91b203d60c75'
		BUILD_VERION_NUMBER = '0'				
		K8S_SSH_SERVER = "${params.k8sSSHServer}"
		K8S_DEPLOYMENT_TEMPLATE = ".\\DevOps\\Kubernetes\\Deployment.yaml"		
		K8S_LATEST_CONFIG_FILE = "DevOps/Kubernetes/Deployment.yaml"						
		PRIVATE_REPOSITORY_ADDRESS = "${params.privateRepositoryAddress}"
		PRIVATE_REPOSITORY_ADDRESS_NAME = "GeeksMS"
		AUTHENTICATION_DOMAIN = "${params.authenticationDomain}"
		HUB_SERVICE_URL = "https://hub.app.geeks.ltd"
		BUILD_NOTIFICATION_RECIPIENTS = "paymon@geeks.ltd.uk"
    }
    agent any
    stages{    
			
			stage('Delete the old version') 
            {
				when { expression { params.Rebuild } }
                steps { script { deleteDir() } } 
            }
				
            stage('Clone sources') 
            {
                steps
                {
                    script
                        {						
							git url: GIT_REPOSITORY
                        }
                }				
            }	
			stage('Get secure info') 
            {
                steps
                {
                    script
                        {			
							echo "Update the application version"
							bat ''' TODO '''													
                        }										
                }
            }  		
            stage('Push to ECR (on linux)')
            {
                steps 
                {        
					script 
					{ 
						docker.withRegistry(ECR_URL, ECR_CRED) 
						{
							docker.image(IMAGE).push(BUILD_VERSION) <<<<< pass ENVs
						} 
					} 
                }
            }

			stage('Update the K8s deployment file') <<<<<<<<<<<<<<<<<<<
            {
                steps 
                {        
                    script 
                    {
						bat ''' replace-in-file %K8S_DEPLOYMENT_TEMPLATE% -set "%%DOCKER_IMAGE%%" %ECR_IMAGE_URL% -set "%%BUILD_VERSION%%" %BUILD_VERSION% '''						
                    }
                }
            }				

			stage('Deploy to cluster')
            {
                steps 
                {
        
                    script 
                    {
					
						bat ''' kubectl apply -f Deployment.yaml '''
                    }
                }
            }				

        }
        
     post
    {
		failure
		{
			script 
			{
				sendEmail('(Failed)', 'Failed to deploy HUB to production')
			}
		}
		success
		{
			script 
			{
				sendEmail('(Succeeded)','Deployed HUB to production')
			}
		}
        always
        {
			node('LinuxDocker')
			{ 
				// make sure that the Docker image is removed
				sh '''docker rmi $IMAGE | true'''
			}
        }
    }
}

